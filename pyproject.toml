[project]
name = "local-cloud-agent"
requires-python = ">=3.12"
dynamic = ["dependencies", "version"]


readme = "README.md"
authors = [
    { name = "Guy Wilson", email = "guywilsonjr@gmail.com" },
]
maintainers = [
    { name = "Guy Wilson", email = "guywilsonjr@gmail.com" },
]
classifiers = [
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    "Development Status :: 3 - Alpha",
    # Indicate who your project is intended for
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    # Pick your license as you wish (see also "license" above)
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",    # Specify the Python versions you support here.
    "Operating System :: Unix",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Monitoring",
    "Typing :: Typed"
]

[project.urls]
Homepage = "https://github.com/guywilsonjr/LocalCloudAgent"
Repository = "https://github.com/guywilsonjr/LocalCloudAgent"

[project.scripts]
local-cloud-agent = "local_cloud_agent.cli.main:main"

[build-system]
# for mypy to run with mypy pydantic plugin need pydantic as well
requires = [
    "setuptools",
    "setuptools_scm>=8",
]
build-backend = "setuptools.build_meta"


[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.packages.find]
namespaces = true

[tool.setuptools_scm]
git_describe_command = "git describe --abbrev=0"

[tool.mypy]
mypy_path = "src"
files = ["src"]
cache_dir = '/dev/null'
strict = true
#disallow_any_unimported = true
#disallow_any_expr = true
#disallow_any_decorated = true
#disallow_any_explicit = true
#disallow_subclassing_any = true
#disallow_untyped_decorators = true
warn_unreachable = true
show_error_context = true
show_error_code_links = true
warn_incomplete_stub = true
pretty = true
namespace_packages = true
plugins = ["pydantic.mypy"]
explicit_package_bases = true
# Strict mode; enables the following flags:
# --warn-unused-configs,
# --disallow-any-generics
# --disallow-subclassing-any
# --disallow-untyped-calls
# --disallow-untyped-defs
# --disallow-incomplete-defs,
# --check-untyped-defs
# --disallow-untyped-decorators
# --warn-redundant-casts
# --warn-unused-ignores
# --warn-return-any
# --no-implicit-reexport
# --strict-equality
# --extra-checks

# --strict-equality: Prohibit equality, identity, and container checks for non-overlapping types (inverse: --no-strict-equality)
#
# --extra-checks: Enable additional checks that are technically correct but may be
# impractical in real code. For example, this prohibits partial overlap
# in TypedDict updates, and makes arguments prepended via Concatenate
# positional-only (inverse: --no-extra-checks)


[[tool.mypy.overrides]]
module = [
    "agent.agent_info",
    "agent.util",
    "agent.post_config",
    "cli.main",
    "agent.operations.util",
    "agent.operations.send"
]

disallow_any_expr = false
disallow_any_explicit = false


[[tool.mypy.overrides]]
module = ["agent.post_config", "agent.models"]
disallow_any_explicit = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true


[tool.pytest.ini_options]

console_output_style = "progress-even-when-capture-no"
#addopts = "-n=auto"
addopts = "-svvv --cov=src --cov-report=html --cov-report=term-missing --log-cli-level=INFO"
asyncio_mode = "strict"
log_cli_level = "INFO"
testpaths = ["tests"]
pythonpath = "src"

[tool.coverage.run]
source = ["src"]


[tool.tox]

legacy_tox_ini = """
[tox]
envlist = py312, mypy

[testenv]
#parallel = all
#parallel_show_output = true

setenv =
    INDOCKER = {env:INDOCKER}
deps =
    -rrequirements-test.txt
commands =
    python3 -m pytest

[testenv:mypy]

commands =
    python3 -m mypy
"""
# TODO
[tool.cibuildwheel]
archs = ["x86_64"]
#[tool.cibuildwheel.config-settings]
#--build-option = "--use-mypyc"

#[tool.cibuildwheel.environment]
#MYPYC_OPT_LEVEL = "3"

#[tool.cibuildwheel.linux]

#archs = ["x86_64"]

#[[tool.cibuildwheel.overrides]]
#select = "*aarch64*"
#inherit.environment = "append"
#environment = { "DOCKER_HOST"="ssh://grip5@grpi5-desktop" }